//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CloudService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CloudService.CloudServiceSoap")]
    public interface CloudServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProductRegister", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ProductRegisterAsync(
                    string strUserID, 
                    CloudService.RegisterType rtRegType, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNInfoAsync(string strUserID, string strSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UploadFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UploadFileAsync(string strUserID, string strSN, string strJsonDicFile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/OfficialWebLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> OfficialWebLoginAsync(string strWebUserID, string strWebPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCookie", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetCookieAsync(string strKey, string strSMBID, string strSN, string strCncVer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendCNCRequest", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SendCNCRequestAsync(string strKey, string strSMBID, string strSN, string strData, int intType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNOptionData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNOptionDataAsync(string strKey, string strSMBID, string strSN, string strData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SetOptionApply", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> SetOptionApplyAsync(string strKey, string strSN, string strOptionApply);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum RegisterType
    {
        
        /// <remarks/>
        Option,
        
        /// <remarks/>
        Cloud,
        
        /// <remarks/>
        ServiceCloud,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface CloudServiceSoapChannel : CloudService.CloudServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class CloudServiceSoapClient : System.ServiceModel.ClientBase<CloudService.CloudServiceSoap>, CloudService.CloudServiceSoap
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CloudServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CloudServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), CloudServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CloudServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CloudServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CloudServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CloudServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CloudServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> ProductRegisterAsync(
                    string strUserID, 
                    CloudService.RegisterType rtRegType, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate)
        {
            return base.Channel.ProductRegisterAsync(strUserID, rtRegType, strOptionMachineCode, strCompanyName, strSaleDate, strMainMachineType, strMainMachineSN, strMachineIndustry, strMachineType, strProductSN, strCustomerCompanyName, strCustomerCompanyCountry, strCustomerCompanyCity, strCustomerCompanyContact, strCustomerCompanyEmail, strCustomerCompanyTel, strCustomerCompanyFax, strCustomerCompanyAddress, strRegisterDate);
        }
        
        public System.Threading.Tasks.Task<string> GetSNInfoAsync(string strUserID, string strSN)
        {
            return base.Channel.GetSNInfoAsync(strUserID, strSN);
        }
        
        public System.Threading.Tasks.Task<string> UploadFileAsync(string strUserID, string strSN, string strJsonDicFile)
        {
            return base.Channel.UploadFileAsync(strUserID, strSN, strJsonDicFile);
        }
        
        public System.Threading.Tasks.Task<string> OfficialWebLoginAsync(string strWebUserID, string strWebPassword)
        {
            return base.Channel.OfficialWebLoginAsync(strWebUserID, strWebPassword);
        }
        
        public System.Threading.Tasks.Task<string> GetCookieAsync(string strKey, string strSMBID, string strSN, string strCncVer)
        {
            return base.Channel.GetCookieAsync(strKey, strSMBID, strSN, strCncVer);
        }
        
        public System.Threading.Tasks.Task<string> SendCNCRequestAsync(string strKey, string strSMBID, string strSN, string strData, int intType)
        {
            return base.Channel.SendCNCRequestAsync(strKey, strSMBID, strSN, strData, intType);
        }
        
        public System.Threading.Tasks.Task<string> GetSNOptionDataAsync(string strKey, string strSMBID, string strSN, string strData)
        {
            return base.Channel.GetSNOptionDataAsync(strKey, strSMBID, strSN, strData);
        }
        
        public System.Threading.Tasks.Task<string> SetOptionApplyAsync(string strKey, string strSN, string strOptionApply)
        {
            return base.Channel.SetOptionApplyAsync(strKey, strSN, strOptionApply);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CloudServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.CloudServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CloudServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://ws.syntecclub.com.tw:3788/CloudService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.CloudServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://ws.syntecclub.com.tw:3788/CloudService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            CloudServiceSoap,
            
            CloudServiceSoap12,
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//
//     變更此檔案可能會導致不正確的行為，而且若已重新產生
//     程式碼，則會遺失變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace SNService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SNService.SNServiceSoap")]
    public interface SNServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNAuthServerInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNAuthServerInfoAsync(string strUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNKeyAsync(string strUserID, string strKeyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNStruture", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNStrutureAsync(string strUserID, string strSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNInfoAsync(string strUserID, string strSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckSNExist", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckSNExistAsync(string strUserID, string strSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/CheckSNListAvailable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CheckSNListAvailableAsync(string strUserID, string[] SNlist);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNInfoAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNInfoAllAsync(string strUserID, string strSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateProductData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateProductDataAsync(string strUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateSyntecAPPLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateSyntecAPPLogAsync(string strUserID, string strProductSN, string strLoginTime, string strAttr, string strAttr2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/UpdateProductPlan", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> UpdateProductPlanAsync(string strUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RenewSNWarrantyDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RenewSNWarrantyDateAsync(string strUserID, string strSN, int intMonth, string strMemo, string strDemandPerson, string strSubCompany, string strCustomerName, string strRequest, string strComment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/RenewFixSNWarrantyDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> RenewFixSNWarrantyDateAsync(string strUserID, string strSN, int intWarrantyNum, int intType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetWarrantyType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetWarrantyTypeAsync(string strUserID, int IntType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNCustomerAsync(string strUserID, string strProductSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ExChangeSN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ExChangeSNAsync(string strUserID, string strOldSN, string strNewSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ShipSN", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ShipSNAsync(string strUserID, string strSN, string strCustomerID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetChildSNInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetChildSNInfoAsync(string strSN, string strUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProductRegister", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ProductRegisterAsync(
                    string strUserID, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProductRegisterV2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ProductRegisterV2Async(
                    string strUserID, 
                    SNService.RegisterType rtType, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProductRegister_cloud", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ProductRegister_cloudAsync(string strUserID, string strProductSN, string JSONData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ProductRegisterV3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ProductRegisterV3Async(
                    string strUserID, 
                    SNService.RegisterType rtType, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate, 
                    string strJSONData, 
                    string strSNGroup, 
                    string strAllSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNRegistrationInfo_cloud", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNRegistrationInfo_cloudAsync(string strUserID, string strProductSNNullable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNRegistrationInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNRegistrationInfoAsync(string strUserID, string strOptionMachineCodeNullable, string strProductSNNullable);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNRegistrationInfoByUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNRegistrationInfoByUserAsync(string strUserID, string strStartDate, string strEndDate, string strStartAt, string strType, string strMaxNum, string customerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetSNRegAnalysis", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetSNRegAnalysisAsync(string strUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetCustomerList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetCustomerListAsync(string userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QCSNReset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> QCSNResetAsync(string strUserID, string strProductSN);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetMainBoardMac", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GetMainBoardMacAsync(string strUserID, string strSN, string strMacPrefix, int iMacCount);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum RegisterType
    {
        
        /// <remarks/>
        Option,
        
        /// <remarks/>
        Cloud,
        
        /// <remarks/>
        ServiceCloud,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface SNServiceSoapChannel : SNService.SNServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class SNServiceSoapClient : System.ServiceModel.ClientBase<SNService.SNServiceSoap>, SNService.SNServiceSoap
    {
        
        /// <summary>
        /// 實作此部分方法來設定服務端點。
        /// </summary>
        /// <param name="serviceEndpoint">要設定的端點</param>
        /// <param name="clientCredentials">用戶端認證</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SNServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(SNServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), SNServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SNServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SNServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SNServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SNServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SNServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> GetSNAuthServerInfoAsync(string strUserID)
        {
            return base.Channel.GetSNAuthServerInfoAsync(strUserID);
        }
        
        public System.Threading.Tasks.Task<string> GetSNKeyAsync(string strUserID, string strKeyID)
        {
            return base.Channel.GetSNKeyAsync(strUserID, strKeyID);
        }
        
        public System.Threading.Tasks.Task<string> GetSNStrutureAsync(string strUserID, string strSN)
        {
            return base.Channel.GetSNStrutureAsync(strUserID, strSN);
        }
        
        public System.Threading.Tasks.Task<string> GetSNInfoAsync(string strUserID, string strSN)
        {
            return base.Channel.GetSNInfoAsync(strUserID, strSN);
        }
        
        public System.Threading.Tasks.Task<string> CheckSNExistAsync(string strUserID, string strSN)
        {
            return base.Channel.CheckSNExistAsync(strUserID, strSN);
        }
        
        public System.Threading.Tasks.Task<string> CheckSNListAvailableAsync(string strUserID, string[] SNlist)
        {
            return base.Channel.CheckSNListAvailableAsync(strUserID, SNlist);
        }
        
        public System.Threading.Tasks.Task<string> GetSNInfoAllAsync(string strUserID, string strSN)
        {
            return base.Channel.GetSNInfoAllAsync(strUserID, strSN);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProductDataAsync(string strUserID)
        {
            return base.Channel.UpdateProductDataAsync(strUserID);
        }
        
        public System.Threading.Tasks.Task<string> UpdateSyntecAPPLogAsync(string strUserID, string strProductSN, string strLoginTime, string strAttr, string strAttr2)
        {
            return base.Channel.UpdateSyntecAPPLogAsync(strUserID, strProductSN, strLoginTime, strAttr, strAttr2);
        }
        
        public System.Threading.Tasks.Task<string> UpdateProductPlanAsync(string strUserID)
        {
            return base.Channel.UpdateProductPlanAsync(strUserID);
        }
        
        public System.Threading.Tasks.Task<string> RenewSNWarrantyDateAsync(string strUserID, string strSN, int intMonth, string strMemo, string strDemandPerson, string strSubCompany, string strCustomerName, string strRequest, string strComment)
        {
            return base.Channel.RenewSNWarrantyDateAsync(strUserID, strSN, intMonth, strMemo, strDemandPerson, strSubCompany, strCustomerName, strRequest, strComment);
        }
        
        public System.Threading.Tasks.Task<string> RenewFixSNWarrantyDateAsync(string strUserID, string strSN, int intWarrantyNum, int intType)
        {
            return base.Channel.RenewFixSNWarrantyDateAsync(strUserID, strSN, intWarrantyNum, intType);
        }
        
        public System.Threading.Tasks.Task<string> GetWarrantyTypeAsync(string strUserID, int IntType)
        {
            return base.Channel.GetWarrantyTypeAsync(strUserID, IntType);
        }
        
        public System.Threading.Tasks.Task<string> GetSNCustomerAsync(string strUserID, string strProductSN)
        {
            return base.Channel.GetSNCustomerAsync(strUserID, strProductSN);
        }
        
        public System.Threading.Tasks.Task<string> ExChangeSNAsync(string strUserID, string strOldSN, string strNewSN)
        {
            return base.Channel.ExChangeSNAsync(strUserID, strOldSN, strNewSN);
        }
        
        public System.Threading.Tasks.Task<string> ShipSNAsync(string strUserID, string strSN, string strCustomerID)
        {
            return base.Channel.ShipSNAsync(strUserID, strSN, strCustomerID);
        }
        
        public System.Threading.Tasks.Task<string> GetChildSNInfoAsync(string strSN, string strUserID)
        {
            return base.Channel.GetChildSNInfoAsync(strSN, strUserID);
        }
        
        public System.Threading.Tasks.Task<string> ProductRegisterAsync(
                    string strUserID, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate)
        {
            return base.Channel.ProductRegisterAsync(strUserID, strOptionMachineCode, strCompanyName, strSaleDate, strMainMachineType, strMainMachineSN, strMachineIndustry, strMachineType, strProductSN, strCustomerCompanyName, strCustomerCompanyCountry, strCustomerCompanyCity, strCustomerCompanyContact, strCustomerCompanyEmail, strCustomerCompanyTel, strCustomerCompanyFax, strCustomerCompanyAddress, strRegisterDate);
        }
        
        public System.Threading.Tasks.Task<string> ProductRegisterV2Async(
                    string strUserID, 
                    SNService.RegisterType rtType, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate)
        {
            return base.Channel.ProductRegisterV2Async(strUserID, rtType, strOptionMachineCode, strCompanyName, strSaleDate, strMainMachineType, strMainMachineSN, strMachineIndustry, strMachineType, strProductSN, strCustomerCompanyName, strCustomerCompanyCountry, strCustomerCompanyCity, strCustomerCompanyContact, strCustomerCompanyEmail, strCustomerCompanyTel, strCustomerCompanyFax, strCustomerCompanyAddress, strRegisterDate);
        }
        
        public System.Threading.Tasks.Task<string> ProductRegister_cloudAsync(string strUserID, string strProductSN, string JSONData)
        {
            return base.Channel.ProductRegister_cloudAsync(strUserID, strProductSN, JSONData);
        }
        
        public System.Threading.Tasks.Task<string> ProductRegisterV3Async(
                    string strUserID, 
                    SNService.RegisterType rtType, 
                    string strOptionMachineCode, 
                    string strCompanyName, 
                    string strSaleDate, 
                    string strMainMachineType, 
                    string strMainMachineSN, 
                    string strMachineIndustry, 
                    string strMachineType, 
                    string strProductSN, 
                    string strCustomerCompanyName, 
                    string strCustomerCompanyCountry, 
                    string strCustomerCompanyCity, 
                    string strCustomerCompanyContact, 
                    string strCustomerCompanyEmail, 
                    string strCustomerCompanyTel, 
                    string strCustomerCompanyFax, 
                    string strCustomerCompanyAddress, 
                    string strRegisterDate, 
                    string strJSONData, 
                    string strSNGroup, 
                    string strAllSN)
        {
            return base.Channel.ProductRegisterV3Async(strUserID, rtType, strOptionMachineCode, strCompanyName, strSaleDate, strMainMachineType, strMainMachineSN, strMachineIndustry, strMachineType, strProductSN, strCustomerCompanyName, strCustomerCompanyCountry, strCustomerCompanyCity, strCustomerCompanyContact, strCustomerCompanyEmail, strCustomerCompanyTel, strCustomerCompanyFax, strCustomerCompanyAddress, strRegisterDate, strJSONData, strSNGroup, strAllSN);
        }
        
        public System.Threading.Tasks.Task<string> GetSNRegistrationInfo_cloudAsync(string strUserID, string strProductSNNullable)
        {
            return base.Channel.GetSNRegistrationInfo_cloudAsync(strUserID, strProductSNNullable);
        }
        
        public System.Threading.Tasks.Task<string> GetSNRegistrationInfoAsync(string strUserID, string strOptionMachineCodeNullable, string strProductSNNullable)
        {
            return base.Channel.GetSNRegistrationInfoAsync(strUserID, strOptionMachineCodeNullable, strProductSNNullable);
        }
        
        public System.Threading.Tasks.Task<string> GetSNRegistrationInfoByUserAsync(string strUserID, string strStartDate, string strEndDate, string strStartAt, string strType, string strMaxNum, string customerName)
        {
            return base.Channel.GetSNRegistrationInfoByUserAsync(strUserID, strStartDate, strEndDate, strStartAt, strType, strMaxNum, customerName);
        }
        
        public System.Threading.Tasks.Task<string> GetSNRegAnalysisAsync(string strUserID)
        {
            return base.Channel.GetSNRegAnalysisAsync(strUserID);
        }
        
        public System.Threading.Tasks.Task<string> GetCustomerListAsync(string userID)
        {
            return base.Channel.GetCustomerListAsync(userID);
        }
        
        public System.Threading.Tasks.Task<string> QCSNResetAsync(string strUserID, string strProductSN)
        {
            return base.Channel.QCSNResetAsync(strUserID, strProductSN);
        }
        
        public System.Threading.Tasks.Task<string> GetMainBoardMacAsync(string strUserID, string strSN, string strMacPrefix, int iMacCount)
        {
            return base.Channel.GetMainBoardMacAsync(strUserID, strSN, strMacPrefix, iMacCount);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SNServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.SNServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.SNServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("http://ws.syntecclub.com.tw:3789/SNService.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.SNServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("http://ws.syntecclub.com.tw:3789/SNService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("找不到名為 \'{0}\' 的端點。", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            SNServiceSoap,
            
            SNServiceSoap12,
        }
    }
}
